[
    {
        "id": "09012e75c72a4968",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7f550ba4b652afbb",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eb54885cfae1efc1",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "94b8abb47e4cb1f2",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "346f85aea8590bba",
        "type": "serial-port",
        "serialport": "/dev/tty/USB1",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "2fa64a6ae4bfad03",
        "type": "serial-port",
        "serialport": "/dev/tty/USB2",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "c413535be070623e",
        "type": "serial-port",
        "serialport": "/dev/tty/USB3",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "32174867b86c7b03",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "UpdateTemperature",
        "func": "let jsonData = JSON.parse(msg.payload);\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/temperature\",\n        \"value\": parseFloat(msg.temperature_value)\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\"+ msg.room_id +\"?api-version=2020-10-31\"\nmsg.method = \"patch\"\n\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 500,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "17a8a64fa23751ed",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\nmsg.temperature_value = msg.serialData[\"temperature_value\"]\n//msg.temperature_unit = msg.serialData[\"temperature_unit\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 500,
        "wires": [
            [
                "af11a3caafbb5fa8"
            ]
        ]
    },
    {
        "id": "c4db83d867cd1492",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "UpdateActuatorState",
        "func": "let jsonData = JSON.parse(msg.payload);\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/intensity_percentage\",\n        \"value\": msg.intensity_percentage\n    },\n    {\n        \"op\": \"add\",\n        \"path\": \"/power_state\",\n        \"value\": msg.state\n    },\n    {\n        \"op\": \"add\",\n        \"path\": \"/type\",\n        \"value\": jsonData[msg.actuator_id][\"type\"]\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.actuator_id + \"?api-version=2020-10-31\"\nmsg.method = \"patch\"\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 740,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "38965161414b027a",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "PersonEnterExit",
        "func": "\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 800,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "dcc8abdf633f1c30",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "MedicalDeviceTracking",
        "func": "let medicalDeviceModel = \"dtmi:io:github:smartoperatingblock:ImplantableMedicalDevice;1\"\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.device_id + \"?api-version=2023-02-27-preview\"\nmsg.method = \"put\"\n\nmsg.payload = {\n    \"$metadata\": {\n        \"$model\": medicalDeviceModel\n    }, \n    \"type\" : msg.device_type \n}\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 860,
        "wires": [
            [
                "1024090145928519"
            ]
        ]
    },
    {
        "id": "f749ed1e2e58c229",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "AvailableActuator",
        "func": "let jsonData = parseJson(msg.payload);\n\njsonData[msg.actuator_id] = {\n    \"type\": msg.actuator_type,\n    \"room\": msg.room_id\n}\n\n//msg.payload = jsonData\nfunction parseJson(string){\n    return string === \"\" ? JSON.parse(\"{}\") : JSON.parse(string)\n}\n\nmsg.payload = jsonData\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 980,
        "wires": [
            [
                "5c6d578149de144a"
            ]
        ]
    },
    {
        "id": "976a5466bc4b4345",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.actuator_id = msg.serialData[\"actuator_id\"]\nmsg.state = msg.serialData[\"state\"]\nmsg.intensity_percentage = msg.serialData[\"intensity_percentage\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 740,
        "wires": [
            [
                "635a32e66dd92586"
            ]
        ]
    },
    {
        "id": "5224a2d0c5f5e2ff",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.person_id = msg.serialData[\"person_id\"]\nmsg.room_id = msg.serialData[\"room_id\"]\nmsg.role = msg.serialData[\"person_role\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 800,
        "wires": [
            [
                "145386797b8afe53"
            ]
        ]
    },
    {
        "id": "af11a3caafbb5fa8",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 500,
        "wires": [
            [
                "32174867b86c7b03"
            ]
        ]
    },
    {
        "id": "9d6fa57b1db1e8b3",
        "type": "switch",
        "z": "09012e75c72a4968",
        "name": "TypeSwitch",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 590,
        "y": 820,
        "wires": [
            [
                "17a8a64fa23751ed"
            ],
            [
                "e0959707dc172828"
            ],
            [
                "2a72d09d78bb7407"
            ],
            [
                "5a61a2afa4a38b4a"
            ],
            [
                "976a5466bc4b4345"
            ],
            [
                "5224a2d0c5f5e2ff"
            ],
            [
                "269af3b43e760d2b"
            ],
            [
                "637a5d6856e31424"
            ],
            [
                "37741262158114fd"
            ],
            [
                "5f4a2d6877405aa5"
            ]
        ]
    },
    {
        "id": "269af3b43e760d2b",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.device_type = msg.serialData[\"device_type\"]\nmsg.device_id = msg.serialData[\"device_id\"]\nmsg.room_id = msg.serialData[\"room_id\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 860,
        "wires": [
            [
                "cb314a12c20513b3"
            ]
        ]
    },
    {
        "id": "637a5d6856e31424",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 920,
        "wires": [
            [
                "3dc151189b79fc01"
            ]
        ]
    },
    {
        "id": "37741262158114fd",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.actuator_id = msg.serialData[\"actuator_id\"]\nmsg.actuator_type = msg.serialData[\"actuator_type\"]\nmsg.room_id = msg.serialData[\"room_id\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 980,
        "wires": [
            [
                "f6e56c9200cdd690"
            ]
        ]
    },
    {
        "id": "c45a10208faeea88",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 740,
        "wires": [
            [
                "6a5968a77bdcb8ec"
            ]
        ]
    },
    {
        "id": "3a01a886905e5fed",
        "type": "http in",
        "z": "09012e75c72a4968",
        "name": "ActuatorCommand",
        "url": "/:actuator_id/:state",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "d95b89b933ecab60"
            ]
        ]
    },
    {
        "id": "3e879afc64077b51",
        "type": "debug",
        "z": "09012e75c72a4968",
        "name": "response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3560,
        "y": 740,
        "wires": []
    },
    {
        "id": "5c6d578149de144a",
        "type": "file",
        "z": "09012e75c72a4968",
        "name": "write file",
        "filename": "/data/configFiles/actuator_room_mapping.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1560,
        "y": 980,
        "wires": [
            [
                "1a6d9092c128a0bd"
            ]
        ]
    },
    {
        "id": "a3885c62d3b2ed9e",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "getType",
        "func": "msg.type = msg.serialData[\"type\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "9d6fa57b1db1e8b3"
            ]
        ]
    },
    {
        "id": "8b23d4b6fc9ad1ef",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read actuator_room_mapping",
        "filename": "/data/configFiles/actuator_room_mapping.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "1107f97b9aa49722"
            ]
        ]
    },
    {
        "id": "d95b89b933ecab60",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "getActuatorIDAndState",
        "func": "msg.actuator_id = msg.req.params.actuator_id\nmsg.state = msg.req.params.state\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "8b23d4b6fc9ad1ef"
            ]
        ]
    },
    {
        "id": "1107f97b9aa49722",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "getRoomIDAndActuatorType",
        "func": "let jsonData = JSON.parse(msg.payload);\nmsg.room_id = jsonData[msg.actuator_id][\"room\"]\nmsg.type = jsonData[msg.actuator_id][\"type\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1300,
        "wires": [
            [
                "19b43e1a0fb43f50"
            ]
        ]
    },
    {
        "id": "19b43e1a0fb43f50",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read room_arduino_mapping",
        "filename": "/data/configFiles/arduino_room_mapping.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1270,
        "y": 1300,
        "wires": [
            [
                "0bcfc84520ddafb2"
            ]
        ]
    },
    {
        "id": "0bcfc84520ddafb2",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "getSerial",
        "func": "let jsonData = JSON.parse(msg.payload);\nmsg.serial = jsonData[msg.room_id]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1300,
        "wires": [
            [
                "334dc786bd2b068a"
            ]
        ]
    },
    {
        "id": "c38d2690eac04451",
        "type": "switch",
        "z": "09012e75c72a4968",
        "name": "SerialSwitch",
        "property": "serial",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "/dev/ttyUSB0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1890,
        "y": 1300,
        "wires": [
            [
                "ea1d80c07843fb89"
            ]
        ]
    },
    {
        "id": "5941b09a0ae77bc7",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "setRequestToGetToken",
        "func": "msg.headers = {};\nmsg.headers['Content-Type'] = \"application/x-www-form-urlencoded\"\nmsg.payload =  `grant_type = client_credentials &\n                client_id = ` + env.get(\"AZURE_DT_CLIENT_ID\") + ` &\n                client_secret =` + env.get(\"AZURE_DT_CLIENT_SECRET\") + ` &\n                resource = https://digitaltwins.azure.net\n                `\nmsg.url = \"https://login.microsoftonline.com/\"+ env.get(\"AZURE_DT_TENANT_ID\") +\"/oauth2/token\"                \nreturn msg;\n//https://digitaltwins.azure.net",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 180,
        "wires": [
            [
                "dd96318fc1b5b6c4"
            ]
        ]
    },
    {
        "id": "1453612b8d0a384b",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "saveToken",
        "func": "msg.token = msg.payload[\"access_token\"]\nmsg.expires_on = msg.payload[\"expiresOn\"]\nmsg.payload = {}\nmsg.payload[\"expiresOn\"] = msg.expires_on\nmsg.payload[\"token\"] = msg.token\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 180,
        "wires": [
            [
                "4c9a183fe7d56c66"
            ]
        ]
    },
    {
        "id": "d2d0866c15fa7ca3",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "checkIfTokenExpired",
        "func": "msg.payload = parseJson(msg.payload);\n\nif(msg.payload == \"\"){\n    msg.tokenExpired = true\n}else{\n    msg.tokenExpires_on = msg.payload[\"expiresOn\"]\n    let fiveMinutesInUnixEpoch = 300\n    msg.tokenExpired = (msg.tokenExpires_on - fiveMinutesInUnixEpoch) < Math.floor(Date.now() / 1000)\n}\n\nfunction parseJson(string) {\n    return string === \"\" ? \"\" : JSON.parse(string)\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "8f2451a34256b4dc"
            ]
        ]
    },
    {
        "id": "8f2451a34256b4dc",
        "type": "switch",
        "z": "09012e75c72a4968",
        "name": "tokenExpiredSwitch",
        "property": "tokenExpired",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "5941b09a0ae77bc7"
            ],
            [
                "be71706450cf31db"
            ]
        ]
    },
    {
        "id": "272e66b82d47e0e4",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "getSerialData",
        "func": "msg.serialData = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "eb9d520bd5382640"
            ]
        ]
    },
    {
        "id": "eb9d520bd5382640",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "getToken",
        "filename": "/data/configFiles/token.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 800,
        "y": 240,
        "wires": [
            [
                "d2d0866c15fa7ca3"
            ]
        ]
    },
    {
        "id": "4c9a183fe7d56c66",
        "type": "file",
        "z": "09012e75c72a4968",
        "name": "writeToken",
        "filename": "/data/configFiles/token.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1930,
        "y": 180,
        "wires": [
            [
                "a3885c62d3b2ed9e"
            ]
        ]
    },
    {
        "id": "be71706450cf31db",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "setToken",
        "func": "msg.token = msg.payload[\"token\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            [
                "a3885c62d3b2ed9e"
            ]
        ]
    },
    {
        "id": "e0959707dc172828",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\nmsg.humidity_percentage = msg.serialData[\"humidity_percentage\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 560,
        "wires": [
            [
                "3af5bf281111cdf5"
            ]
        ]
    },
    {
        "id": "2a72d09d78bb7407",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\nmsg.luminosity_value = msg.serialData[\"luminosity_value\"]\n//msg.luminosity_unit = msg.serialData[\"luminosity_unit\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 620,
        "wires": [
            [
                "eff2c757e27ebc08"
            ]
        ]
    },
    {
        "id": "5a61a2afa4a38b4a",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\nmsg.person_inside = msg.serialData[\"person_inside\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 680,
        "wires": [
            [
                "e944970a233c812f"
            ]
        ]
    },
    {
        "id": "931fbc85cf48c3ad",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "UpdateHumidity",
        "func": "let jsonData = JSON.parse(msg.payload);\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/humidity\",\n        \"value\": parseFloat(msg.humidity_percentage)\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.room_id + \"?api-version=2020-10-31\"\nmsg.method = \"patch\"\n\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 560,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "c1a003d2e63c8fc7",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "UpdateLuminosity",
        "func": "let jsonData = JSON.parse(msg.payload);\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/luminosity\",\n        \"value\": parseFloat(msg.luminosity_value)\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.room_id + \"?api-version=2020-10-31\"\nmsg.method = \"patch\"\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 620,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "f495c7f7c9e65097",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "UpdatePersonInside",
        "func": "let jsonData = JSON.parse(msg.payload);\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/presence_inside\",\n        \"value\": msg.person_inside\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.room_id + \"?api-version=2020-10-31\"\nmsg.method = \"patch\"\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 680,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "b8465449f8f024c3",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "AssociatedRoom",
        "func": "let jsonData = parseJson(msg.payload);\n\njsonData[msg.room_id] = msg.serial_id\n\n\n//msg.payload = jsonData\nfunction parseJson(string){\n    return string === \"\" ? JSON.parse(\"{}\") : JSON.parse(string)\n}\n\nmsg.payload = jsonData\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1040,
        "wires": [
            [
                "4a089b6cc4d44d96"
            ]
        ]
    },
    {
        "id": "5f4a2d6877405aa5",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "processSerialData",
        "func": "msg.room_id = msg.serialData[\"room_id\"]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1040,
        "wires": [
            [
                "3dd49201b59cb7f9"
            ]
        ]
    },
    {
        "id": "4a089b6cc4d44d96",
        "type": "file",
        "z": "09012e75c72a4968",
        "name": "write file",
        "filename": "/data/configFiles/arduino_room_mapping.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1570,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "334dc786bd2b068a",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "setSerialMessage",
        "func": "msg.state = isNaN(msg.state) ? msg.state : parseInt(msg.state)\nmsg.payload = {}\nmsg.payload[\"command\"] = msg.type\nmsg.payload[\"room_id\"] = msg.room_id\nmsg.payload[\"status\"] = msg.state\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1300,
        "wires": [
            [
                "c38d2690eac04451"
            ]
        ]
    },
    {
        "id": "3af5bf281111cdf5",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 560,
        "wires": [
            [
                "931fbc85cf48c3ad"
            ]
        ]
    },
    {
        "id": "eff2c757e27ebc08",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 620,
        "wires": [
            [
                "c1a003d2e63c8fc7"
            ]
        ]
    },
    {
        "id": "e944970a233c812f",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 680,
        "wires": [
            [
                "f495c7f7c9e65097"
            ]
        ]
    },
    {
        "id": "635a32e66dd92586",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/actuator_room_mapping.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 740,
        "wires": [
            [
                "c4db83d867cd1492"
            ]
        ]
    },
    {
        "id": "145386797b8afe53",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 800,
        "wires": [
            [
                "38965161414b027a"
            ]
        ]
    },
    {
        "id": "cb314a12c20513b3",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 860,
        "wires": [
            [
                "dcc8abdf633f1c30"
            ]
        ]
    },
    {
        "id": "3dc151189b79fc01",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/type0.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 920,
        "wires": [
            [
                "61eca1567ddb5e81"
            ]
        ]
    },
    {
        "id": "f6e56c9200cdd690",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/actuator_room_mapping.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 980,
        "wires": [
            [
                "f749ed1e2e58c229"
            ]
        ]
    },
    {
        "id": "3dd49201b59cb7f9",
        "type": "file in",
        "z": "09012e75c72a4968",
        "name": "read file",
        "filename": "/data/configFiles/arduino_room_mapping.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1160,
        "y": 1040,
        "wires": [
            [
                "b8465449f8f024c3"
            ]
        ]
    },
    {
        "id": "ead8458e27835fd5",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "setSerial",
        "func": "msg.serial_id = \"/dev/tty/USB0\"\nmsg.payload = JSON.parse(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "272e66b82d47e0e4"
            ]
        ]
    },
    {
        "id": "6c9f6e80226a5597",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 0, \"room_id\": \"room1\", \"temperature_value\": 24, \"temperature_unit\": \"celsius\"}",
        "payloadType": "str",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "781486d011dadee8",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 1, \"room_id\": \"room1\", \"humidity_percentage\": 40}",
        "payloadType": "str",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "8c25201c78c9ab3b",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 2, \"room_id\": \"room1\", \"luminosity_value\": 1000}",
        "payloadType": "str",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "26ec74664cb5ff41",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 3, \"room_id\": \"room1\", \"person_inside\": true}",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "6b1290a059fc78a2",
        "type": "serial in",
        "z": "09012e75c72a4968",
        "name": "",
        "serial": "94b8abb47e4cb1f2",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "6a5968a77bdcb8ec",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3390,
        "y": 740,
        "wires": [
            [
                "3e879afc64077b51"
            ]
        ]
    },
    {
        "id": "dd96318fc1b5b6c4",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "getToken",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "1453612b8d0a384b"
            ]
        ]
    },
    {
        "id": "105b0c2203081bf6",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 4, \"actuator_id\": \"act1\", \"state\" : \"on\", \"intensity_percentage\": 40}",
        "payloadType": "str",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "61b317ae6b43b406",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 6, \"device_type\": \"0\", \"device_id\" : \"med2\", \"room_id\": \"room1\"}",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "1a6d9092c128a0bd",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "createActuatorDT",
        "func": "let actuatorModel = \"dtmi:io:github:smartoperatingblock:Actuator;1\"\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.actuator_id + \"?api-version=2023-02-27-preview\"\nmsg.method = \"put\"\n\nmsg.payload = {\n    \"$metadata\": {\n        \"$model\": actuatorModel\n    },\n    \"type\": msg.actuator_type\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 980,
        "wires": [
            [
                "f1d5bf00146cb950"
            ]
        ]
    },
    {
        "id": "c02092f546355c98",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2110,
        "y": 980,
        "wires": [
            [
                "7e2fc28f43937855"
            ]
        ]
    },
    {
        "id": "7e2fc28f43937855",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "createRelationShipWithRoom",
        "func": "let relID = msg.room_id + \"-\" + msg.actuator_id\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + msg.room_id + \"/relationships/\" + relID + \"?api-version=2020-10-31\"\nmsg.method = \"put\"\nmsg.payload = \n    {\n        \"$targetId\": msg.actuator_id,\n        \"$relationshipName\": \"rel_has_actuator\"\n    }\n\n\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 980,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "c6c4f1b87153a885",
        "type": "inject",
        "z": "09012e75c72a4968",
        "name": "type8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": 8, \"actuator_type\": \"0\", \"actuator_id\" : \"act111\", \"room_id\": \"room1\"}",
        "payloadType": "str",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "ead8458e27835fd5"
            ]
        ]
    },
    {
        "id": "f1d5bf00146cb950",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 980,
        "wires": [
            [
                "c02092f546355c98"
            ]
        ]
    },
    {
        "id": "ea1d80c07843fb89",
        "type": "serial out",
        "z": "09012e75c72a4968",
        "name": "",
        "serial": "94b8abb47e4cb1f2",
        "x": 2090,
        "y": 1280,
        "wires": []
    },
    {
        "id": "1024090145928519",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 860,
        "wires": [
            [
                "b172127aa6066d80"
            ]
        ]
    },
    {
        "id": "b172127aa6066d80",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1750,
        "y": 860,
        "wires": [
            [
                "1005329bc4b3f3df"
            ]
        ]
    },
    {
        "id": "745c5f5dda78248a",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "createRelationShipWithRoom",
        "func": "let process_id = JSON.parse(msg.payload)\nprocess_id = msg.process_id[\"value\"][0][\"$dtId\"]\nlet relID = process_id + \"-\" + msg.device_id\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + process_id + \"/relationships/\" + relID + \"?api-version=2023-02-27-preview\"\nmsg.method = \"put\"\nmsg.payload = {\n    \"$targetId\": msg.device_id,\n    \"$relationshipName\": \"rel_contains_medical_technology\"\n}\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 860,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    },
    {
        "id": "1005329bc4b3f3df",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "requestProcessRelatedToTheRoom",
        "func": "msg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/query?api-version=2023-02-27-preview\"\nlet query = \"SELECT TOP (1) SurgicalProcess.$dtId FROM DIGITALTWINS SurgicalProcess JOIN Room RELATED SurgicalProcess.rel_is_inside WHERE Room.$dtId = \" + msg.room_id\nmsg.method = \"post\"\n\nmsg.payload = {\n    \"query\": query\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 860,
        "wires": [
            [
                "3b376db55eb10b0f"
            ]
        ]
    },
    {
        "id": "d743a7865378b0dc",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2430,
        "y": 860,
        "wires": [
            [
                "745c5f5dda78248a"
            ]
        ]
    },
    {
        "id": "3b376db55eb10b0f",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 860,
        "wires": [
            [
                "d743a7865378b0dc"
            ]
        ]
    },
    {
        "id": "61eca1567ddb5e81",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "requestProcessRelatedToTheRoom",
        "func": "msg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/query?api-version=2023-02-27-preview\"\nlet query = \"SELECT TOP (1) SurgicalProcess.$dtId FROM DIGITALTWINS SurgicalProcess JOIN Room RELATED SurgicalProcess.rel_is_inside WHERE Room.$dtId = \" + msg.room_id\nmsg.method = \"post\"\n\nmsg.payload = {\n    \"query\": query\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 920,
        "wires": [
            [
                "780cd80ab50444c2"
            ]
        ]
    },
    {
        "id": "780cd80ab50444c2",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 920,
        "wires": [
            [
                "955129310e7a1ad4"
            ]
        ]
    },
    {
        "id": "955129310e7a1ad4",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1850,
        "y": 920,
        "wires": [
            [
                "f51c81bfe7e71efa"
            ]
        ]
    },
    {
        "id": "f51c81bfe7e71efa",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "requestPatientRelatedToTheProcess",
        "func": "let process_id = JSON.parse(msg.payload)\nprocess_id = msg.process_id[\"value\"][0][\"$dtId\"]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/query?api-version=2023-02-27-preview\"\nlet query = \"SELECT TOP (1) Patient.$dtId FROM DIGITALTWINS SurgicalProcess JOIN Patient RELATED SurgicalProcess.rel_involve_patient where SurgicalProcess.$dtId =\"+ process_id\nmsg.method = \"post\"\n\nmsg.payload = {\n    \"query\": query\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 920,
        "wires": [
            [
                "dff86deba04d2359"
            ]
        ]
    },
    {
        "id": "dff86deba04d2359",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "add header ",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token\nmsg.headers['Content-Type'] = \"application/json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 920,
        "wires": [
            [
                "e1b522b4e3afd1db"
            ]
        ]
    },
    {
        "id": "e1b522b4e3afd1db",
        "type": "https-node",
        "z": "09012e75c72a4968",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2550,
        "y": 920,
        "wires": [
            [
                "a35b075974d1b012"
            ]
        ]
    },
    {
        "id": "a35b075974d1b012",
        "type": "function",
        "z": "09012e75c72a4968",
        "name": "setPatientOnOperatingTable",
        "func": "let patient_id = JSON.parse(msg.payload)\npatient_id = msg.process_id[\"value\"][0][\"$dtId\"]\n\nmsg.payload = [\n    {\n        \"op\": \"add\",\n        \"path\": \"/isOnOperatingTable\",\n        \"value\": true\n    }\n]\n\nmsg.url = \"https://digital-twin-layer.api.neu.digitaltwins.azure.net/digitaltwins/\" + patient_id + \"?api-version=2020-10-31\"\nmsg.method = \"patch\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 920,
        "wires": [
            [
                "c45a10208faeea88"
            ]
        ]
    }
]